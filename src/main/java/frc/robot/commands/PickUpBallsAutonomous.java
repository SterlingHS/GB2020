// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;

import edu.wpi.first.wpilibj.command.Command;
import frc.robot.Robot;
import frc.robot.RobotMap;
import frc.robot.subsystems.PixyTracker;

/**
 *
 */
public class PickUpBallsAutonomous extends Command {

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
  public PickUpBallsAutonomous() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    requires(Robot.drivingSystem);
    requires(Robot.intake);
    requires(Robot.pixyTracker);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
  }

  // Called just before this Command runs the first time
  @Override
  protected void initialize() {
  }

  // Called repeatedly when this Command is scheduled to run
  @Override
  protected void execute() {
    double x, turn=0;
        PixyTracker.getBiggestBlock();
        if(Robot.pixyTracker.Read_Pixy_is_Ball())
        {
          IntakeBallsToTransferup();
          x = Robot.pixyTracker.Read_Pixy_x()-160;
          if(x>50) turn=RobotMap.ASSISTED_SPEED; 
          if(x<0) turn=-RobotMap.ASSISTED_SPEED;
        }
        Robot.drivingSystem.arcadeDrive(-RobotMap.ASSISTED_SPEED, turn, 1);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        if(Robot.intake.number_of_balls() == 4) 
          return true;
        if(Robot.intake.number_of_balls() == 3 && Robot.pixyTracker.Read_Pixy_is_Ball() == false) 
          return true;
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        Robot.drivingSystem.arcadeDrive(0, 0, 0);
        Robot.intake.stop_all();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }

    protected void IntakeBallsToTransferup(){
      if (Robot.intake.number_of_balls() < 4)
        Robot.intake.frontintakeIN();
      else Robot.intake.stop_frontintake();
      Robot.intake.roller_to_sensor();
      Robot.intake.transferup_to_sensor();
    }
  }
