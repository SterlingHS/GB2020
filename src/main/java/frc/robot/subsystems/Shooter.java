// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.PWMTalonSRX;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import frc.robot.RobotMap;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Shooter extends Subsystem 
{
        private PWMTalonSRX shooterCtr1 = new PWMTalonSRX(RobotMap.SHOOTER1_CAN_ID);
        private PWMTalonSRX shooterCtr2 = new PWMTalonSRX(RobotMap.SHOOTER2_CAN_ID);
        private SpeedControllerGroup shooterCtr = new SpeedControllerGroup(shooterCtr1, shooterCtr2);
        private PWMTalonSRX rotateShooterCtr = new PWMTalonSRX(RobotMap.ROTATOR_CAN_ID);

        private DigitalInput left_switch_rotator = new DigitalInput(RobotMap.LEFT_SWITCH_DIO);
        private DigitalInput right_switch_rotator = new DigitalInput(RobotMap.RIGHT_SWITCH_DIO);
        
    @Override
    public void initDefaultCommand() 
    {
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() 
    {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    // Methods for shooter
    public void shoot(double speed) 
    {
        speed = Math.max(speed,RobotMap.Shooter_MAX_Speed);
        shooterCtr.set(speed);
    }

    public void clean_shoot() // shoot inward to "clean" the shooter
    {
        shooterCtr.set(-RobotMap.inputShooter_Speed);
    }

    public void stop_shooter()
    {
        shooterCtr.stopMotor();
    }

    // Methods for shooter
    public void stop_rotator()
    {
        rotateShooterCtr.stopMotor();
    }

    public void rotate_right()
    {
        if(is_right_rotator() == false)
            rotateShooterCtr.set(RobotMap.rotateShooter_Speed);
        else stop_rotator();
    }

    public void rotate_left()
    {
        if(is_left_rotator() == false)
            rotateShooterCtr.set(-RobotMap.rotateShooter_Speed);
        else stop_rotator();
    }

    public void stop_all()
    {
        stop_shooter();
        stop_rotator();
    }

    // Sensors on rotator
    public boolean is_right_rotator(){
        return right_switch_rotator.get();
    }

    public boolean is_left_rotator(){
        return left_switch_rotator.get();
    }

    
    public double Read_Limelight_tx()
	{
        return NetworkTableInstance.getDefault().getTable("limelight").getEntry("tx").getDouble(0);	
    }

    public double Read_Limelight_ty()
	{
        return NetworkTableInstance.getDefault().getTable("limelight").getEntry("ty").getDouble(0);
	}
    
    public double Read_Limelight_ta()
	{
		return NetworkTableInstance.getDefault().getTable("limelight").getEntry("ta").getDouble(0);
    }
    
    public double Read_Limelight_tv()
	{
		return NetworkTableInstance.getDefault().getTable("limelight").getEntry("tv").getDouble(0);
	}
}